%% Import data from text file.
% Script for importing data from the following text file:
%
%    F:\Dokumente\bachelorthesis\tests\GeoSensor 01-06 Nexus 7 matlab.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2017/06/03 14:41:36

%% Initialize variables.
filename = 'F:\Dokumente\bachelorthesis\tests\GeoSensor 01-06 Nexus 7 matlab.csv';
delimiter = ',';
startRow = 2;

%% Read columns of data as text:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines' ,startRow-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric text to numbers.
% Replace non-numeric text with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = mat2cell(dataArray{col}, ones(length(dataArray{col}), 1));
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[4,5,6,9,10,11,12,15,16,17,18,21,22,25,26,30,31,36]
    % Converts text in the input cell array to numbers. Replaced non-numeric
    % text with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1)
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData(row), regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if numbers.contains(',')
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'))
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric text to numbers.
            if ~invalidThousandsSeparator
                numbers = textscan(char(strrep(numbers, ',', '')), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch
            raw{row, col} = rawData{row};
        end
    end
end

dateFormatIndex = 1;
blankDates = cell(1,size(raw,2));
anyBlankDates = false(size(raw,1),1);
invalidDates = cell(1,size(raw,2));
anyInvalidDates = false(size(raw,1),1);
for col=[1,7,13,19]% Convert the contents of columns with dates to MATLAB datetimes using the specified date format.
    try
        dates{col} = datetime(dataArray{col}, 'Format', 'yyyy-MM-dd HH:mm:ss', 'InputFormat', 'yyyy-MM-dd HH:mm:ss'); %#ok<SAGROW>
    catch
        try
            % Handle dates surrounded by quotes
            dataArray{col} = cellfun(@(x) x(2:end-1), dataArray{col}, 'UniformOutput', false);
            dates{col} = datetime(dataArray{col}, 'Format', 'yyyy-MM-dd HH:mm:ss', 'InputFormat', 'yyyy-MM-dd HH:mm:ss'); %#ok<SAGROW>
        catch
            dates{col} = repmat(datetime([NaN NaN NaN]), size(dataArray{col})); %#ok<SAGROW>
        end
    end
    
    dateFormatIndex = dateFormatIndex + 1;
    blankDates{col} = dataArray{col} == '';
    anyBlankDates = blankDates{col} | anyBlankDates;
    invalidDates{col} = isnan(dates{col}.Hour) - blankDates{col};
    anyInvalidDates = invalidDates{col} | anyInvalidDates;
end
dates = dates(:,[1,7,13,19]);
blankDates = blankDates(:,[1,7,13,19]);
invalidDates = invalidDates(:,[1,7,13,19]);

%% Split data into numeric and string columns.
rawNumericColumns = raw(:, [4,5,6,9,10,11,12,15,16,17,18,21,22,25,26,30,31,36]);
rawStringColumns = string(raw(:, [2,3,8,14,20,23,24,27,28,29,32,33,34,35,37]));


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

%% Make sure any text containing <undefined> is properly converted to an <undefined> categorical
for catIdx = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]
    idx = (rawStringColumns(:, catIdx) == "<undefined>");
    rawStringColumns(idx, catIdx) = "";
end

%% Create output variable
GeoSensor0106Nexus7matlab = table;
GeoSensor0106Nexus7matlab.receive_time = dates{:, 1};
GeoSensor0106Nexus7matlab.comment = categorical(rawStringColumns(:, 1));
GeoSensor0106Nexus7matlab.arduino_software = categorical(rawStringColumns(:, 2));
GeoSensor0106Nexus7matlab.arduino_time = cell2mat(rawNumericColumns(:, 1));
GeoSensor0106Nexus7matlab.lat_0 = cell2mat(rawNumericColumns(:, 2));
GeoSensor0106Nexus7matlab.lng_0 = cell2mat(rawNumericColumns(:, 3));
GeoSensor0106Nexus7matlab.time_0 = dates{:, 2};
GeoSensor0106Nexus7matlab.provider_0 = categorical(rawStringColumns(:, 3));
GeoSensor0106Nexus7matlab.altitude_0 = cell2mat(rawNumericColumns(:, 4));
GeoSensor0106Nexus7matlab.accuracy_0 = cell2mat(rawNumericColumns(:, 5));
GeoSensor0106Nexus7matlab.lat_1 = cell2mat(rawNumericColumns(:, 6));
GeoSensor0106Nexus7matlab.lng_1 = cell2mat(rawNumericColumns(:, 7));
GeoSensor0106Nexus7matlab.time_1 = dates{:, 3};
GeoSensor0106Nexus7matlab.provider_1 = categorical(rawStringColumns(:, 4));
GeoSensor0106Nexus7matlab.altitude_1 = cell2mat(rawNumericColumns(:, 8));
GeoSensor0106Nexus7matlab.accuracy_1 = cell2mat(rawNumericColumns(:, 9));
GeoSensor0106Nexus7matlab.lat_2 = cell2mat(rawNumericColumns(:, 10));
GeoSensor0106Nexus7matlab.lng_2 = cell2mat(rawNumericColumns(:, 11));
GeoSensor0106Nexus7matlab.time_2 = dates{:, 4};
GeoSensor0106Nexus7matlab.provider_2 = categorical(rawStringColumns(:, 5));
GeoSensor0106Nexus7matlab.altitude_2 = cell2mat(rawNumericColumns(:, 12));
GeoSensor0106Nexus7matlab.accuracy_2 = cell2mat(rawNumericColumns(:, 13));
GeoSensor0106Nexus7matlab.type_0 = categorical(rawStringColumns(:, 6));
GeoSensor0106Nexus7matlab.name_0 = categorical(rawStringColumns(:, 7));
GeoSensor0106Nexus7matlab.sensor_0 = cell2mat(rawNumericColumns(:, 14));
GeoSensor0106Nexus7matlab.value_0 = cell2mat(rawNumericColumns(:, 15));
GeoSensor0106Nexus7matlab.unit_0 = categorical(rawStringColumns(:, 8));
GeoSensor0106Nexus7matlab.type_1 = categorical(rawStringColumns(:, 9));
GeoSensor0106Nexus7matlab.name_1 = categorical(rawStringColumns(:, 10));
GeoSensor0106Nexus7matlab.sensor_1 = cell2mat(rawNumericColumns(:, 16));
GeoSensor0106Nexus7matlab.value_1 = cell2mat(rawNumericColumns(:, 17));
GeoSensor0106Nexus7matlab.unit_1 = categorical(rawStringColumns(:, 11));
GeoSensor0106Nexus7matlab.type_2 = categorical(rawStringColumns(:, 12));
GeoSensor0106Nexus7matlab.name_2 = categorical(rawStringColumns(:, 13));
GeoSensor0106Nexus7matlab.sensor_2 = categorical(rawStringColumns(:, 14));
GeoSensor0106Nexus7matlab.value_2 = cell2mat(rawNumericColumns(:, 18));
GeoSensor0106Nexus7matlab.unit_2 = categorical(rawStringColumns(:, 15));

% For code requiring serial dates (datenum) instead of datetime, uncomment
% the following line(s) below to return the imported dates as datenum(s).

% GeoSensor0106Nexus7matlab.receive_time=datenum(GeoSensor0106Nexus7matlab.receive_time);GeoSensor0106Nexus7matlab.time_0=datenum(GeoSensor0106Nexus7matlab.time_0);GeoSensor0106Nexus7matlab.time_1=datenum(GeoSensor0106Nexus7matlab.time_1);GeoSensor0106Nexus7matlab.time_2=datenum(GeoSensor0106Nexus7matlab.time_2);

%% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp dateFormatIndex dates blankDates anyBlankDates invalidDates anyInvalidDates rawNumericColumns rawStringColumns R catIdx idx;